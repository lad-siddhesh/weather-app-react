{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Title","src","alt","width","height","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temp","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","sys","main","weather","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"6QAmBeA,E,uKAbP,OACI,6BACI,yBAAKC,IAAK,cAAcC,IAAI,SAASC,MAAM,OAAOC,OAAO,SACzD,kDACA,gF,GANIC,IAAMC,WCcXC,E,uKAdP,OACI,6BACG,0BAAMC,SAAUC,KAAKC,MAAMC,YACvB,2BAAOC,KAAM,OAAOC,KAAM,OAAOC,YAAY,eAC7C,2BAAOF,KAAM,OAAOC,KAAK,UAAUC,YAAY,kBAC/C,qD,GAPAT,IAAMC,WCiBVS,E,uKAfP,OAEI,6BACKN,KAAKC,MAAMM,MAAQP,KAAKC,MAAMO,SAAW,wCAAcR,KAAKC,MAAMM,KAAzB,KAAiCP,KAAKC,MAAMO,QAA5C,KACzCR,KAAKC,MAAMQ,MAAQ,2CAAiBT,KAAKC,MAAMQ,KAA5B,KACnBT,KAAKC,MAAMS,UAAY,yCAAeV,KAAKC,MAAMS,SAA1B,KACvBV,KAAKC,MAAMU,aAAe,0CAAgBX,KAAKC,MAAMU,YAA3B,KAC1BX,KAAKC,MAAMW,OAAS,2BAAIZ,KAAKC,MAAMW,Y,GAT9BhB,IAAMC,WCItBgB,EAAU,mCAyFDC,E,4MAtFbC,MAAQ,CACNN,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAKTd,W,uCAAa,WAAOe,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAC9Bd,EAAUS,EAAEG,OAAOC,SAASb,QAAQc,MAH/B,SAKYC,MAAM,oDAAD,OAAqDhB,EAArD,YAA6DC,EAA7D,kBAA8EK,IAL/F,cAKLW,EALK,gBAMQA,EAASC,OANjB,OAMLC,EANK,OAOPnB,GAAQC,GACVmB,QAAQC,IAAIF,GAEZ,EAAKG,SAAS,CAEZtB,KAAMmB,EAAKtB,KACXI,QAASkB,EAAKI,IAAItB,QAClBC,KAAMiB,EAAKK,KAAKtB,KAChBC,SAAUgB,EAAKK,KAAKrB,SACpBC,YAAae,EAAKM,QAAQ,GAAGrB,YAC7BC,MAAO,MAMT,EAAKiB,SAAS,CAEZpB,UAAMO,EACNT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,uBA9BA,4C,6GAuCX,OACE,yBAAKqB,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACd,kBAAC,EAAD,OAGD,yBAAKA,UAAU,2BACb,kBAAC,EAAD,CAAM/B,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CACEK,KAAMP,KAAKe,MAAMR,KACjBC,QAASR,KAAKe,MAAMP,QACpBC,KAAMT,KAAKe,MAAMN,KACjBC,SAAUV,KAAKe,MAAML,SACrBC,YAAaX,KAAKe,MAAMJ,YACxBC,MAAOZ,KAAKe,MAAMH,iB,GApElBhB,IAAMC,WCIJqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLe,QAAQf,MAAMA,EAAMuC,a","file":"static/js/main.353cf0e9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nclass Title extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <img src= '../logo.png' alt=\"boohoo\" width=\"60px\" height=\"60px\"/>\r\n                <h1>What's The Weather</h1>\r\n                <p>Find out the Weather conditions of our City!</p>\r\n            </div>\r\n\r\n        );\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default Title;","import React from \"react\";\r\n\r\nclass Form extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n               <form onSubmit={this.props.getWeather}> \r\n                   <input type =\"text\" name =\"city\" placeholder=\"Enter City\"/>\r\n                   <input type =\"text\" name=\"country\" placeholder=\"Enter Country\"/>\r\n                   <button>Get Weather</button>\r\n               </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nclass Weather extends React.Component {\r\n    render() {\r\n        return (\r\n\r\n            <div>\r\n                {this.props.city && this.props.country && <p>Location :{this.props.city}, {this.props.country} </p>}\r\n                {this.props.temp && <p>Temperature: {this.props.temp} </p>}\r\n                {this.props.humidity && <p> Humidity: {this.props.humidity} </p>}\r\n                {this.props.description && <p>Conditions: {this.props.description} </p>}\r\n                {this.props.error && <p>{this.props.error}</p>}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Weather;","import React from \"react\";\n\nimport Title from \"./components/Title\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"f35682f9b1694f7baccca0a20809be71\";\n\nclass App extends React.Component {\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined,\n\n  }\n\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n    const data = await api_call.json();\n    if (city && country) {\n      console.log(data);\n\n      this.setState({\n\n        city: data.name,\n        country: data.sys.country,\n        temp: data.main.temp,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\",\n\n      });\n\n    }\n    else {\n      this.setState({\n\n        temp: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please Enter Value\"\n\n      });\n    }\n\n  }\n\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-5 title-container\" >\n               <Title />\n\n              </div>\n              <div className=\"col-xs-7 form-container\">\n                <Form getWeather={this.getWeather} />\n                <Weather\n                  city={this.state.city}\n                  country={this.state.country}\n                  temp={this.state.temp}\n                  humidity={this.state.humidity}\n                  description={this.state.description}\n                  error={this.state.error}\n                />\n              </div>\n            \n            </div>\n\n          </div>\n        </div>\n\n      </div>\n\n    );\n  }\n}\n\n\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}